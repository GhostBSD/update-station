#!/usr/local/bin/python

import gtk as Gtk
import gobject as GObject
import threading
import sys
import socket
from time import sleep
from subprocess import Popen
ustationfile = '/usr/local/lib/update-station/'
sys.path.append(ustationfile)
from updateHandler import lookFbsdUpdate, checkVersionUpdate
from updateHandler import installFreeBSDUpdate, fetchFreeBSDUpdate, pkgUpdateList
from updateHandler import fetchPkgUpdate, installPkgUpdate, checkForUpdate
from updateHandler import runCheckUpdate, cleanDesktop, CheckPkgUpdateFromFile
from updateHandler import lookGBupdate, downloadGBPorts, copyGBport, deleteGBport
from updateHandler import installGBUpdate
# ifPortsIstall
updateToInstall = []
lockPkg = []

insingal = True
threadBreak = False
GObject.threads_init()
uwinstatue = True


class UpdateWindow:
    def hidewindow(self, widget):
        self.window.hide()

    def delete_event(self, widget):
        # don't delete; hide instead
        self.window.hide_on_delete()

    def startupdate(self, widget):
        if len(lockPkg) != 0:
            pass
        if len(updateToInstall) != 0:
            if self.insingal is True:
                installUpdate(updateToInstall, self.window)
                self.insingal = False
                self.window.hide()

    def create_bbox(self, horizontal, spacing, layout):
        table = Gtk.Table(1, 5, True)
        button = Gtk.Button("Install update")
        table.attach(button, 0, 1, 0, 1)
        button.connect("clicked", self.startupdate, )
        button = Gtk.Button(stock=Gtk.STOCK_CLOSE)
        table.attach(button, 4, 5, 0, 1)
        button.connect("clicked", self.hidewindow)
        return table

    def __init__(self):
        self.insingal = True
        # window
        self.window = Gtk.Window()
        self.window.connect("destroy", self.delete_event)
        self.window.set_size_request(600, 400)
        self.window.set_resizable(False)
        self.window.set_title("Update Manager")
        self.window.set_border_width(0)
        self.window.set_position(Gtk.WIN_POS_CENTER)
        box1 = Gtk.VBox(False, 0)
        self.window.add(box1)
        box1.show()
        box2 = Gtk.VBox(False, 0)
        box2.set_border_width(20)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        # Title
        titleext = "Updates available!"
        titlelabel = Gtk.Label(
            "<b><span size='large'>%s</span></b>" % titleext)
        titlelabel.set_use_markup(True)
        box2.pack_start(titlelabel, False, False, 0)
        self.tree_store = Gtk.TreeStore(GObject.TYPE_STRING,
                                        GObject.TYPE_BOOLEAN)
        sw = Gtk.ScrolledWindow()
        sw.set_shadow_type(Gtk.SHADOW_ETCHED_IN)
        sw.set_policy(Gtk.POLICY_AUTOMATIC, Gtk.POLICY_AUTOMATIC)
        sw.add(self.Display(self.store()))
        sw.show()
        box2.pack_start(sw, True, True, 10)
        box2 = Gtk.HBox(False, 10)
        box2.set_border_width(5)
        box1.pack_start(box2, False, False, 0)
        box2.show()
        # Add button
        box2.pack_start(self.create_bbox(True, 10, Gtk.BUTTONBOX_END),
                        True, True, 5)
        self.window.show_all()

    def store(self):
        self.tree_store.clear()
        if checkVersionUpdate() is True:
            self.tree_store.append(None, (lookFbsdUpdate(), True))
            if "FreeBSD Update" not in updateToInstall:
                updateToInstall.extend(["FreeBSD Update"])
        if CheckPkgUpdateFromFile() is True:
            pinter = self.tree_store.append(None,
                                            ("Software Update Available", True))
            for line in pkgUpdateList():
                self.tree_store.append(pinter, (line, True))
            if "Software Update Available" not in updateToInstall:
                updateToInstall.extend(["Software Update Available"])
        if lookGBupdate() is True:
            self.tree_store.append(None, ("GhostBSD Software Update Available", True))
            if "GhostBSD Software Update Available" not in updateToInstall:
                updateToInstall.extend(["GhostBSD Software Update Available"])
        return self.tree_store

    def Display(self, model):
        self.view = Gtk.TreeView(model)
        self.renderer = Gtk.CellRendererText()
        self.renderer1 = Gtk.CellRendererToggle()
        self.renderer1.set_property('activatable', True)
        self.renderer1.connect('toggled', self.col1_toggled_cb, model)
        self.column0 = Gtk.TreeViewColumn("Name", self.renderer, text=0)
        self.column1 = Gtk.TreeViewColumn("Complete", self.renderer1)
        self.column1.add_attribute(self.renderer1, "active", 1)
        self.view.append_column(self.column1)
        self.view.append_column(self.column0)
        self.view.set_headers_visible(False)
        return self.view

    def col1_toggled_cb(self, cell, path, model):
        model[path][1] = not model[path][1]
        if ":" in path:
            if model[path][1] is False:
                lockPkg.extend([model[path][0]])
            else:
                lockPkg.remove(model[path][0])
        else:
            if model[path][1] is False:
                updateToInstall.remove(model[path][0].partition(':')[0])
            else:
                updateToInstall.extend([model[path][0].partition(':')[0]])
        return


class TrayIcon:
    def close_application(self, widget):
        quit()

    def __init__(self):
        # Statue Tray Code
        self.statusIcon = Gtk.StatusIcon()
        self.statusIcon.set_tooltip('Update Available')
        self.menu = Gtk.Menu()
        self.menu.show_all()
        self.statusIcon.connect("activate", self.leftclick)
        self.statusIcon.connect('popup-menu', self.icon_clicked)

    def nm_menu(self):
        # right click menue
        self.menu = Gtk.Menu()
        close_item = Gtk.MenuItem("Close")
        close_item.connect("activate", self.close_application)
        self.menu.append(close_item)
        self.menu.show_all()
        return self.menu

    def leftclick(self, status_icon):
        if checkForUpdate() is True:
            UpdateWindow()
            self.destroy()

    def icon_clicked(self, status_icon, button, time):
        position = Gtk.status_icon_position_menu
        self.nm_menu()
        self.menu.popup(None, None, position, button, time, status_icon)

    def destroy(self):
        self.statusIcon.set_visible(False)

    def updatetray(self):
        if checkForUpdate() is True:
            self.statusIcon.set_visible(True)
            self.statusIcon.set_from_file(ustationfile + "system-software-update.png")
            # self.statusIcon.set_from_icon_name("update-manager")
            var = ""
            if checkVersionUpdate() is True:
                var = "FreeBSD" + lookFbsdUpdate().partition(':')[2]
            if CheckPkgUpdateFromFile() is True:
                if len(var) == 0:
                    var = "Software Upgrade"
                else:
                    var += "\nSoftware Upgrade"
            if lookGBupdate() is True:
                if len(var) == 0:
                    var = "GhostBSD Software Update"
                else:
                    var += "\nGhostBSD Software Update"
            notify = 'notify-send "Update available" "' + var + '" -i stock_view-details -t 10000'
            Popen(notify, shell=True, close_fds=True)
        else:
            self.statusIcon.set_visible(False)
        return

    def TreadingUpdate(self):
        thr = threading.Thread(target=self.check)
        thr.setDaemon(True)
        thr.start()

    def check(self):
        while True:
            sleep(1200)
            runCheckUpdate()
            self.updatetray()
        return True


def read_output(window, probar, installupdate, window1):
    howmany = len(installupdate)
    fraction = 1.0 / int(howmany)
    if "FreeBSD Update" in installupdate:
        probar.set_text("Fetching FreeBSD updates")
        sleep(1)
        dfu = fetchFreeBSDUpdate()
        while 1:
            line = dfu.readline()
            if not line:
                break
            bartest = line
            probar.set_text("%s" % bartest.rstrip())
        probar.set_text("FreeBSD updates downloaded")
        new_val = probar.get_fraction() + (fraction / 2)
        probar.set_fraction(new_val)
        sleep(1)
        probar.set_text("Installing FreeBSD updates")
        ifu = installFreeBSDUpdate()
        while 1:
            line = ifu.readline()
            if not line:
                break
            bartest = line
            probar.set_text("%s" % bartest.rstrip())
        probar.set_text("FreeBSD updates installed")
        new_val = probar.get_fraction() + (fraction / 2)
        probar.set_fraction(new_val)
        sleep(1)
    if "Software Update Available" in installupdate:
        probar.set_text("Fetching packages updates")
        sleep(1)
        fpu = fetchPkgUpdate()
        while 1:
            line = fpu.readline()
            if not line:
                break
            bartest = line
            probar.set_text("%s" % bartest.rstrip())
        probar.set_text("Packages updates downloaded")
        new_val = probar.get_fraction() + (fraction / 3)
        probar.set_fraction(new_val)
        sleep(1)
        probar.set_text("Installing packages updates")
        sleep(1)
        ipu = installPkgUpdate()
        while 1:
            line = ipu.readline()
            if not line:
                break
            bartest = line
            probar.set_text("%s" % bartest.rstrip())
        probar.set_text("Packages updates installed")
        new_val = probar.get_fraction() + (fraction / 3)
        probar.set_fraction(new_val)
        sleep(1)
        probar.set_text("Cleaning Desktop Icon")
        cleanDesktop()
        probar.set_text("Cleaning Done")
        new_val = probar.get_fraction() + (fraction / 3)
        probar.set_fraction(new_val)
        sleep(1)
        # need to add a script to set pkg after pkg update.
    if "GhostBSD Software Update Available" in installupdate:
        probar.set_text("Downloading GhostBSD ports")
        sleep(1)
        dgp = downloadGBPorts()
        while 1:
            line = dgp.readline()
            if not line:
                break
            bartest = line
            probar.set_text("%s" % bartest.rstrip())
        probar.set_text("Downloading complete")
        new_val = probar.get_fraction() + (fraction / 4)
        probar.set_fraction(new_val)
        sleep(1)
        probar.set_text("Copying GhostBSD ports")
        sleep(1)
        cgp = copyGBport()
        while 1:
            line = cgp.readline()
            if not line:
                break
            bartest = line
            probar.set_text("%s" % bartest.rstrip())
        probar.set_text("Copying ports complete")
        new_val = probar.get_fraction() + (fraction / 4)
        probar.set_fraction(new_val)
        sleep(1)
        probar.set_text("Deleting /tmp ports")
        sleep(1)
        dgp = deleteGBport()
        while 1:
            line = dgp.readline()
            if not line:
                break
            bartest = line
            probar.set_text("%s" % bartest.rstrip())
        probar.set_text("/tmp/ports deleted")
        new_val = probar.get_fraction() + (fraction / 4)
        probar.set_fraction(new_val)
        sleep(1)
        probar.set_text("Installing GhostBSD ports update")
        sleep(1)
        installGBUpdate()
        probar.set_text("GhostBSD update Complete")
        new_val = probar.get_fraction() + (fraction / 4)
        probar.set_fraction(new_val)
        sleep(1)
    window.hide()
    window1.hide()
    if "FreeBSD Update" in installupdate:
        restartSystem()
    else:
        Successful()


class installUpdate:
    """Installation progress window."""

    def close_application(self, widget):
        """To Quit the GTK APP."""
        Gtk.main_quit()

    def __init__(self, installupdate, window):
        """Initiall window."""
        self.win = Gtk.Window()
        self.win.connect("delete-event", Gtk.main_quit)
        self.win.set_size_request(500, 75)
        self.win.set_resizable(False)
        self.win.set_title("installing Update")
        self.win.set_border_width(0)
        self.win.set_position(Gtk.WIN_POS_CENTER)
        box1 = Gtk.VBox(False, 0)
        self.win.add(box1)
        box1.show()
        box2 = Gtk.VBox(False, 10)
        box2.set_border_width(10)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        self.pbar = Gtk.ProgressBar()
        self.pbar.set_orientation(Gtk.PROGRESS_LEFT_TO_RIGHT)
        self.pbar.set_fraction(0.0)
        self.pbar.set_size_request(-1, 20)
        box2.pack_start(self.pbar, False, False, 0)
        self.win.show_all()
        thr = threading.Thread(target=read_output,
                               args=(self.win, self.pbar, installupdate,
                                     window))
        thr.setDaemon(True)
        thr.start()


class initialInstall:
    def __init__(self):
        self.win = Gtk.Window()
        self.win.connect("delete-event", Gtk.main_quit)
        # self.win.set_size_request(500, 75)
        self.win.set_resizable(False)
        self.win.set_title("Initial Installation Before Update")
        self.win.set_border_width(0)
        self.win.set_position(Gtk.WIN_POS_CENTER)
        box1 = Gtk.VBox(False, 0)
        self.win.add(box1)
        box1.show()
        box2 = Gtk.VBox(False, 10)
        box2.set_border_width(10)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        self.port = Gtk.CheckButton("FreeBSD ports installation")
        self.src = Gtk.CheckButton("FreeBSD Source(Recommended for ports)")
        box2.pack_start(self.port, False, False, 0)
        box2.pack_start(self.src, False, False, 0)
        self.win.show_all()


rtxt = """In order to complete the update of your system it needs to restart."""


class restartSystem():
    def on_reboot(self, widget):
        Popen('shutdown -r now', shell=True)
        Gtk.main_quit()

    def on_close(self, widget, window):
        window.hide()

    def __init__(self):
        window = Gtk.Window()
        window.set_position(Gtk.WIN_POS_CENTER)
        window.set_border_width(8)
        window.connect("destroy", self.on_close)
        window.set_title("Update Completed")
        box1 = Gtk.VBox(False, 0)
        window.add(box1)
        box1.show()
        box2 = Gtk.VBox(False, 10)
        box2.set_border_width(10)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        label = Gtk.Label(rtxt)
        box2.pack_start(label)
        box2 = Gtk.HBox(False, 10)
        box2.set_border_width(5)
        box1.pack_start(box2, False, True, 0)
        box2.show()
        table = Gtk.Table(1, 2, True)
        restart = Gtk.Button("Restart")
        restart.connect("clicked", self.on_reboot)
        Continue = Gtk.Button("Continue")
        Continue.connect("clicked", self.on_close, window)
        table.attach(Continue, 0, 1, 0, 1)
        table.attach(restart, 1, 2, 0, 1)
        box2.pack_start(table)
        window.show_all()

stxt = """Update successfully completed."""


class Successful:
    def on_close(self, widget, window):
        window.hide()

    def __init__(self):
        window = Gtk.Window()
        window.set_position(Gtk.WIN_POS_CENTER)
        window.set_border_width(8)
        window.connect("destroy", self.on_close)
        window.set_title("Update Completed")
        box1 = Gtk.VBox(False, 0)
        window.add(box1)
        box1.show()
        box2 = Gtk.VBox(False, 10)
        box2.set_border_width(10)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        label = Gtk.Label(stxt)
        box2.pack_start(label)
        box2 = Gtk.HBox(False, 10)
        box2.set_border_width(5)
        box1.pack_start(box2, False, True, 0)
        box2.show()
        table = Gtk.Table(1, 2, True)
        restart = Gtk.Button("Close")
        restart.connect("clicked", self.on_close, window)
        table.attach(restart, 1, 2, 0, 1)
        box2.pack_start(table)
        window.show_all()


class UpdateManager:
    TrayIcon().TreadingUpdate()

# initialInstall()
if socket.gethostname() != 'ghostbsd':
    UpdateManager()
    Gtk.main()
else:
    exit()
