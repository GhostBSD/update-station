#!/usr/local/bin/python

"""Update Station main code."""
import gtk as Gtk
import gobject as GObject
import threading
import sys
import socket
from time import sleep
from subprocess import Popen
ustationfile = '/usr/local/lib/update-station/'
updateImage = ustationfile + "system-software-update.png"
sys.path.append(ustationfile)
from updateHandler import lookfbsdupdate, checkversionupdate
from updateHandler import installfreebsdupdate, fetchfreebsdupdate
from updateHandler import fetchpkgupdate, installpkgupdate, checkforupdate
from updateHandler import runcheckupdate, cleandesktop, checkpkgupdatefromfile
from updateHandler import pkgupdatelist

updateToInstall = []
lockPkg = []

insingal = True
threadBreak = False
GObject.threads_init()
uwinstatue = True
iconStopRefrech = False


class UpdateWindow:
    def hidewindow(self, widget):
        if close_session is True:
            Gtk.main_quit()
        else:
            self.window.hide()
            global iconStopRefrech
            iconStopRefrech = False

    def delete_event(self, widget):
        # don't delete; hide instead
        self.window.hide_on_delete()

    def startupdate(self, widget):
        if len(lockPkg) != 0:
            pass
        if len(updateToInstall) != 0:
            if self.insingal is True:
                InstallUpdate(updateToInstall, self.window)
                self.insingal = False
                self.window.hide()

    def create_bbox(self, horizontal, spacing, layout):
        table = Gtk.Table(1, 5, True)
        button = Gtk.Button("Install update")
        table.attach(button, 0, 1, 0, 1)
        button.connect("clicked", self.startupdate)
        button = Gtk.Button(stock=Gtk.STOCK_CLOSE)
        table.attach(button, 4, 5, 0, 1)
        button.connect("clicked", self.hidewindow)
        return table

    def __init__(self):
        self.insingal = True
        # window
        self.window = Gtk.Window()
        self.window.connect("destroy", self.delete_event)
        self.window.set_size_request(600, 400)
        self.window.set_resizable(False)
        self.window.set_title("Update Manager")
        self.window.set_border_width(0)
        self.window.set_position(Gtk.WIN_POS_CENTER)
        box1 = Gtk.VBox(False, 0)
        self.window.add(box1)
        box1.show()
        box2 = Gtk.VBox(False, 0)
        box2.set_border_width(20)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        # Title
        titleext = "Updates available!"
        titlelabel = Gtk.Label(
            "<b><span size='large'>%s</span></b>" % titleext)
        titlelabel.set_use_markup(True)
        box2.pack_start(titlelabel, False, False, 0)
        self.tree_store = Gtk.TreeStore(GObject.TYPE_STRING,
                                        GObject.TYPE_BOOLEAN)
        sw = Gtk.ScrolledWindow()
        sw.set_shadow_type(Gtk.SHADOW_ETCHED_IN)
        sw.set_policy(Gtk.POLICY_AUTOMATIC, Gtk.POLICY_AUTOMATIC)
        sw.add(self.display(self.store()))
        sw.show()
        box2.pack_start(sw, True, True, 10)
        box2 = Gtk.HBox(False, 10)
        box2.set_border_width(5)
        box1.pack_start(box2, False, False, 0)
        box2.show()
        # Add button
        box2.pack_start(self.create_bbox(True, 10, Gtk.BUTTONBOX_END),
                        True, True, 5)
        self.window.show_all()

    def store(self):
        self.tree_store.clear()
        if checkversionupdate() is True:
            self.tree_store.append(None, (lookfbsdupdate(), True))
            if "FreeBSD Update" not in updateToInstall:
                updateToInstall.extend(["FreeBSD Update"])
        if checkpkgupdatefromfile() is True:
            pinter = self.tree_store.append(None,
                                            ("Software Update Available",
                                             True))
            for line in pkgupdatelist():
                self.tree_store.append(pinter, (line, True))
            if "Software Update Available" not in updateToInstall:
                updateToInstall.extend(["Software Update Available"])
        return self.tree_store

    def display(self, model):
        self.view = Gtk.TreeView(model)
        self.renderer = Gtk.CellRendererText()
        self.renderer1 = Gtk.CellRendererToggle()
        self.renderer1.set_property('activatable', True)
        self.renderer1.connect('toggled', self.col1_toggled_cb, model)
        self.column0 = Gtk.TreeViewColumn("Name", self.renderer, text=0)
        self.column1 = Gtk.TreeViewColumn("Complete", self.renderer1)
        self.column1.add_attribute(self.renderer1, "active", 1)
        self.view.append_column(self.column1)
        self.view.append_column(self.column0)
        self.view.set_headers_visible(False)
        return self.view

    def col1_toggled_cb(self, cell, path, model):
        model[path][1] = not model[path][1]
        if ":" in path:
            if model[path][1] is False:
                lockPkg.extend([model[path][0]])
            else:
                lockPkg.remove(model[path][0])
        else:
            if model[path][1] is False:
                updateToInstall.remove(model[path][0].partition(':')[0])
            else:
                updateToInstall.extend([model[path][0].partition(':')[0]])
        return


class TrayIcon:
    def close_application(self, widget):
        quit()

    def __init__(self):
        # Statue Tray Code
        self.statusIcon = Gtk.StatusIcon()
        self.statusIcon.set_tooltip('Update Available')
        self.menu = Gtk.Menu()
        self.menu.show_all()
        self.statusIcon.connect("activate", self.leftclick)
        self.statusIcon.connect('popup-menu', self.icon_clicked)
        self.statusIcon.set_visible(False)
        self.statusIcon.set_from_file(updateImage)

    def nm_menu(self):
        # right click menue
        self.menu = Gtk.Menu()
        open_update = Gtk.MenuItem("Open Update")
        open_update.connect("activate", self.leftclick)
        close_item = Gtk.MenuItem("Close")
        close_item.connect("activate", self.close_application)
        self.menu.append(open_update)
        self.menu.append(close_item)
        self.menu.show_all()
        return self.menu

    def leftclick(self, status_icon):
        # if checkforupdate() is True:
        global iconStopRefrech
        iconStopRefrech = True
        UpdateWindow()
        self.hide_icon()

    def icon_clicked(self, status_icon, button, time):
        position = Gtk.status_icon_position_menu
        self.nm_menu()
        self.menu.popup(None, None, position, button, time, status_icon)

    def hide_icon(self):
        self.statusIcon.set_visible(False)

    def updatetray(self):
        if checkforupdate() is True:
            self.statusIcon.set_visible(True)
            # self.statusIcon.set_from_icon_name("update-manager")
            var = ""
            if checkversionupdate() is True:
                var = "FreeBSD" + lookfbsdupdate().partition(':')[2]
            if checkpkgupdatefromfile() is True:
                if len(var) == 0:
                    var = "Software Upgrade"
                else:
                    var += "\nSoftware Upgrade"
            notify = 'notify-send "Update available" "'
            notify += var + '" -i stock_view-details -t 10000'
            Popen(notify, shell=True, close_fds=True)
        else:
            self.statusIcon.set_visible(False)
        return

    def treadingupdate(self):
        thr = threading.Thread(target=self.check)
        thr.setDaemon(True)
        thr.start()

    def check(self):
        while True:
            sleep(1200)
            global iconStopRefrech
            if iconStopRefrech is False:
                runcheckupdate()
                self.updatetray()
        return True


def read_output(window, probar, installupdate, window1):
    howmany = len(installupdate)
    fraction = 1.0 / int(howmany)
    if "FreeBSD Update" in installupdate:
        probar.set_text("Fetching FreeBSD updates")
        sleep(1)
        dfu = fetchfreebsdupdate()
        while 1:
            line = dfu.readline()
            if not line:
                break
            bartest = line
            probar.set_text("%s" % bartest.rstrip())
        probar.set_text("FreeBSD updates downloaded")
        new_val = probar.get_fraction() + (fraction / 2)
        probar.set_fraction(new_val)
        sleep(1)
        probar.set_text("Installing FreeBSD updates")
        ifu = installfreebsdupdate()
        while 1:
            line = ifu.readline()
            if not line:
                break
            bartest = line
            probar.set_text("%s" % bartest.rstrip())
        probar.set_text("FreeBSD updates installed")
        new_val = probar.get_fraction() + (fraction / 2)
        probar.set_fraction(new_val)
        sleep(1)
    if "Software Update Available" in installupdate:
        probar.set_text("Fetching packages updates")
        sleep(1)
        fpu = fetchpkgupdate()
        while 1:
            line = fpu.readline()
            if not line:
                break
            bartest = line
            probar.set_text("%s" % bartest.rstrip())
        probar.set_text("Packages updates downloaded")
        new_val = probar.get_fraction() + (fraction / 3)
        probar.set_fraction(new_val)
        sleep(1)
        probar.set_text("Installing packages updates")
        sleep(1)
        ipu = installpkgupdate()
        while 1:
            line = ipu.readline()
            if not line:
                break
            bartest = line
            probar.set_text("%s" % bartest.rstrip())
        probar.set_text("Packages updates installed")
        new_val = probar.get_fraction() + (fraction / 3)
        probar.set_fraction(new_val)
        sleep(1)
        # to adding sanaty check here.
    window.hide()
    window1.hide()
    global iconStopRefrech
    iconStopRefrech = False
    RestartSystem()


class InstallUpdate:
    """Installation progress window."""

    def close_application(self, widget):
        """To Quit the GTK APP."""
        Gtk.main_quit()

    def __init__(self, installupdate, window):
        """Initiall window."""
        self.win = Gtk.Window()
        self.win.connect("delete-event", Gtk.main_quit)
        self.win.set_size_request(500, 75)
        self.win.set_resizable(False)
        self.win.set_title("installing Update")
        self.win.set_border_width(0)
        self.win.set_position(Gtk.WIN_POS_CENTER)
        box1 = Gtk.VBox(False, 0)
        self.win.add(box1)
        box1.show()
        box2 = Gtk.VBox(False, 10)
        box2.set_border_width(10)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        self.pbar = Gtk.ProgressBar()
        self.pbar.set_orientation(Gtk.PROGRESS_LEFT_TO_RIGHT)
        self.pbar.set_fraction(0.0)
        self.pbar.set_size_request(-1, 20)
        box2.pack_start(self.pbar, False, False, 0)
        self.win.show_all()
        thr = threading.Thread(target=read_output,
                               args=(self.win, self.pbar, installupdate,
                                     window))
        thr.setDaemon(True)
        thr.start()


rtxt = """The computer needs to restart to use the updated software."""


class RestartSystem():
    def on_reboot(self, widget):
        Popen('doas shutdown -r now', shell=True)
        Gtk.main_quit()

    def on_close(self, widget, window):
        if close_session is True:
            Gtk.main_quit()
        else:
            window.hide()

    def __init__(self):
        window = Gtk.Window()
        window.set_position(Gtk.WIN_POS_CENTER)
        window.set_border_width(8)
        window.connect("destroy", self.on_close)
        window.set_title("Update Completed")
        box1 = Gtk.VBox(False, 0)
        window.add(box1)
        box1.show()
        box2 = Gtk.VBox(False, 10)
        box2.set_border_width(10)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        label = Gtk.Label(rtxt)
        box2.pack_start(label)
        box2 = Gtk.HBox(False, 10)
        box2.set_border_width(5)
        box1.pack_start(box2, False, True, 0)
        box2.show()
        table = Gtk.Table(1, 2, True)
        restart = Gtk.Button("Restart Now")
        restart.connect("clicked", self.on_reboot)
        continuebtn = Gtk.Button("Restart Later")
        continuebtn.connect("clicked", self.on_close, window)
        table.attach(continuebtn, 0, 1, 0, 1)
        table.attach(restart, 1, 2, 0, 1)
        box2.pack_start(table)
        window.show_all()


class noUpdateAvailable(object):
    """docstring for noUpdateAvailable"""
    def on_close(self, widget, window):
        Gtk.main_quit()

    def __init__(self):
        window = Gtk.Window()
        window.set_position(Gtk.WIN_POS_CENTER)
        window.set_border_width(8)
        window.connect("destroy", self.on_close)
        window.set_title("No Update Available")
        box1 = Gtk.VBox(False, 0)
        window.add(box1)
        box1.show()
        box2 = Gtk.VBox(False, 10)
        box2.set_border_width(10)
        box1.pack_start(box2, True, True, 0)
        box2.show()
        label = Gtk.Label("No update available, this system is up to date.")
        box2.pack_start(label)
        box2 = Gtk.HBox(False, 10)
        box2.set_border_width(5)
        box1.pack_start(box2, False, True, 0)
        box2.show()
        table = Gtk.Table(1, 2, True)
        restart = Gtk.Button("Close")
        restart.connect("clicked", self.on_close, window)
        table.attach(restart, 1, 2, 0, 1)
        box2.pack_start(table)
        window.show_all()


class startCheckUpdate:
    """docstring for startCheckUpdate"""
    def __init__(self):
        runcheckupdate()
        if checkforupdate() is True:
            UpdateWindow()
        else:
            noUpdateAvailable()

arg = sys.argv
UsageMSG = """
Usage for %s:

Available Commands:

check-now       - Lock for update now

""" % arg[0]

global close_session

if len(arg) > 2:
    print(UsageMSG)
    sys.exit(0)
elif len(arg) == 1:
    if socket.gethostname() != 'ghostbsd':
        close_session = False
        TrayIcon().treadingupdate()
        Gtk.main()
    else:
        exit()
elif len(arg) == 2 and arg[1] == "check-now":
    close_session = True
    startCheckUpdate()
    Gtk.main()
else:
    print(UsageMSG)
    sys.exit(0)
